name: Deploy React App to EC2

on:
  push:
    branches:
      - main   # Change branch if needed

jobs:
  build-deploy:
    runs-on: self-hosted   # your EC2 runner

    steps:
      # 1. Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v3

      # 2. Setup Node (via nvm)
      - name: Setup Node.js with nvm
        run: |
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install 20
            nvm alias default 20
            nvm use 20
            node -v
            npm -v

      # 3. Install deps & build

      - name: Install Dependencies
        run: |
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use 20
            rm -rf node_modules package-lock.json   # ðŸ”‘ clean install
            npm install --legacy-peer-deps


      - name: Install & Build
        run: |
            npm run build

    #   # 4. Rsync build to /var/www/site1
    #   - name: Deploy to Nginx root
    #     run: |
    #       rsync -avz --delete dist/ /var/www/site1/
    #       sudo chown -R www-data:www-data /var/www/site1
    #       sudo chmod -R 755 /var/www/site1

      - name: Deploy with rsync
        run: |
            rsync -avz --delete dist/ /var/www/site1/
          

      # 5. Reload Nginx
      - name: Reload Nginx
        run: |
          sudo systemctl reload nginx

  notify:
    name: Send notification email (robust Python)
    needs: build-deploy
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Checkout (for commit info)
        uses: actions/checkout@v3

      - name: Compose plain-text and HTML bodies (to files)
        env:
          GITHUB_RUN_STARTED_AT: ${{ github.run_started_at }}
        run: |
          set -euo pipefail

          BRANCH="${GITHUB_REF#refs/heads/}"
          STATUS="${{ needs.build-deploy.result }}"
          COMMIT="$GITHUB_SHA"
          COMMIT_SHORT=${COMMIT:0:7}
          COMMIT_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$COMMIT"
          RUN_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          WORKFLOW="$GITHUB_WORKFLOW"
          ACTOR="$GITHUB_ACTOR"
          STARTED_AT="${GITHUB_RUN_STARTED_AT:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}"
          LAST_COMMIT=$(git --no-pager log -1 --pretty=format:"%s â€” %an <%ae>")

          if [ "$STATUS" = "success" ]; then
            STATUS_COLOR="#16a34a"
          else
            STATUS_COLOR="#ef4444"
          fi

          # plain text
          cat > /tmp/ci_text_body.txt <<TXT
          CI/CD Notification - ${STATUS}

          Repository: ${GITHUB_REPOSITORY}
          Branch: ${BRANCH}
          Workflow: ${WORKFLOW}
          Triggered by: ${ACTOR}
          Status: ${STATUS}
          Commit: ${COMMIT_SHORT}
          Commit URL: ${COMMIT_URL}
          Run URL: ${RUN_URL}
          Started at: ${STARTED_AT}

          Last commit:
          ${LAST_COMMIT}

          Notes:
          - If status is 'failure' check the run logs at the Run URL above.
          - Deployed files (if success) were synced to /var/www/site1 on your EC2.
          TXT

          # HTML (inline CSS)
          cat > /tmp/ci_html_body.html <<HTML
          <!doctype html>
          <html>
            <head><meta charset="utf-8" /><title>CI/CD Notification</title></head>
            <body style="font-family:Arial,Helvetica,sans-serif;background:#f6f7fb;margin:0;padding:24px;">
              <div style="max-width:700px;margin:0 auto;background:#fff;border-radius:8px;box-shadow:0 6px 20px rgba(16,24,40,0.08);overflow:hidden;">
                <div style="padding:20px 24px;border-bottom:1px solid #eef2f7;display:flex;align-items:center;justify-content:space-between;">
                  <div>
                    <strong style="font-size:18px;color:#0f172a;">${GITHUB_REPOSITORY}</strong><br/>
                    <span style="color:#475569;font-size:13px;">Workflow: ${WORKFLOW} â€¢ Branch: ${BRANCH}</span>
                  </div>
                  <div style="text-align:right;">
                    <span style="display:inline-block;padding:8px 12px;border-radius:999px;background:${STATUS_COLOR};color:#fff;font-weight:600;">
                      ${STATUS^^}
                    </span>
                  </div>
                </div>

                <div style="padding:18px 24px;">
                  <table style="width:100%;border-collapse:collapse;font-size:14px;color:#0f172a;">
                    <tr>
                      <td style="padding:8px 0;font-weight:600;width:120px">Triggered by</td>
                      <td style="padding:8px 0">${ACTOR}</td>
                    </tr>
                    <tr>
                      <td style="padding:8px 0;font-weight:600">Commit</td>
                      <td style="padding:8px 0"><a href="${COMMIT_URL}" style="color:#0369a1;text-decoration:none">${COMMIT_SHORT}</a></td>
                    </tr>
                    <tr>
                      <td style="padding:8px 0;font-weight:600">Run</td>
                      <td style="padding:8px 0"><a href="${RUN_URL}" style="color:#0369a1;text-decoration:none">View run logs</a></td>
                    </tr>
                    <tr>
                      <td style="padding:8px 0;font-weight:600">Started at</td>
                      <td style="padding:8px 0">${STARTED_AT}</td>
                    </tr>
                  </table>

                  <hr style="border:none;border-top:1px solid #eef2f7;margin:16px 0;" />

                  <div style="font-size:13px;color:#334155;">
                    <strong>Last commit</strong>
                    <div style="margin-top:8px;padding:12px;background:#f8fafc;border-radius:6px;color:#0f172a;">${LAST_COMMIT}</div>
                  </div>

                  <div style="margin-top:18px;font-size:13px;color:#475569">
                    <strong>Notes</strong>
                    <ul style="margin:8px 0 0 18px;">
                      <li>If status is <strong>failure</strong> check the run logs at the Run URL above.</li>
                      <li>Deployed files (if success) were synced to <code>/var/www/site1</code> on your EC2.</li>
                    </ul>
                  </div>
                </div>

                <div style="background:#f8fafc;padding:12px 24px;border-top:1px solid #eef2f7;color:#7c8796;font-size:12px;">
                  This is an automated message from your GitHub Actions CI/CD pipeline.
                </div>
              </div>
            </body>
          </html>
          HTML

      - name: Send email via Python (Gmail SMTP, STARTTLS)
        uses: dawidd6/action-send-mail@v3
        env:
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          NOTIFY_TO: ${{ secrets.NOTIFY_TO }}
          NOTIFY_CC: ${{ secrets.NOTIFY_CC }}
          EMAIL_FROM_NAME: ${{ secrets.EMAIL_FROM_NAME }}
          run: |
              python3 - <<'PY'
              import os, sys, smtplib
              from email.message import EmailMessage

              smtp_user = os.environ.get("SMTP_USERNAME")
              smtp_pass = os.environ.get("SMTP_PASSWORD")
              to_raw = os.environ.get("NOTIFY_TO", "")
              cc_raw = os.environ.get("NOTIFY_CC", "")
              from_name = os.environ.get("EMAIL_FROM_NAME", "").strip()

              if not smtp_user or not smtp_pass or not to_raw:
                print("Required secrets: SMTP_USERNAME, SMTP_PASSWORD, NOTIFY_TO", file=sys.stderr)
                sys.exit(1)

              with open("/tmp/ci_text_body.txt","r",encoding="utf-8") as f:
                text_body = f.read()
              with open("/tmp/ci_html_body.html","r",encoding="utf-8") as f:
                html_body = f.read()

              tos = [a.strip() for a in to_raw.split(",") if a.strip()]
              ccs = [a.strip() for a in cc_raw.split(",") if a.strip()]

              msg = EmailMessage()
              msg['Subject'] = f"CI/CD: {os.environ.get('GITHUB_JOB','')} â€” {os.environ.get('GITHUB_REPOSITORY','')} #{os.environ.get('GITHUB_RUN_NUMBER','')}"
              msg['From'] = f"{from_name} <{smtp_user}>" if from_name else smtp_user
              msg['To'] = ", ".join(tos)
              if ccs:
                msg['Cc'] = ", ".join(ccs)

              msg.set_content(text_body)
              msg.add_alternative(html_body, subtype='html')

              recipients = tos + ccs
              
              server = smtplib.SMTP("smtp.gmail.com", 587, timeout=30)
              server.ehlo()
              server.starttls()
              server.ehlo()
              server.login(smtp_user, smtp_pass)
              server.send_message(msg, from_addr=smtp_user, to_addrs=recipients)
              server.quit()
              print("Email sent to:", recipients)
              PY

