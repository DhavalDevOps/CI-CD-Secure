name: Deploy React App to EC2

on:
  push:
    branches:
      - main   # Change branch if needed

jobs:
  build-deploy:
    runs-on: self-hosted   # your EC2 runner

    steps:
      # 1. Checkout repo
      - name: Checkout repo
        uses: actions/checkout@v3

      # 2. Setup Node (via nvm)
      - name: Setup Node.js with nvm
        run: |
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install 20
            nvm alias default 20
            nvm use 20
            node -v
            npm -v

      # 3. Install deps & build

      - name: Install Dependencies
        run: |
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use 20
            rm -rf node_modules package-lock.json   # ðŸ”‘ clean install
            npm install --legacy-peer-deps


      - name: Install & Build
        run: |
            npm run build

    #   # 4. Rsync build to /var/www/site1
    #   - name: Deploy to Nginx root
    #     run: |
    #       rsync -avz --delete dist/ /var/www/site1/
    #       sudo chown -R www-data:www-data /var/www/site1
    #       sudo chmod -R 755 /var/www/site1

      - name: Deploy with rsync
        run: |
            rsync -avz --delete dist/ /var/www/site1/
          

      # 5. Reload Nginx
      - name: Reload Nginx
        run: |
          sudo systemctl reload nginx

  notify:
    name: Send notification email
    needs: build-deploy
    runs-on: ubuntu-latest
    if: always()  
    steps:
      - name: Checkout (for commit info)
        uses: actions/checkout@v3

      - name: Compose email body
        # we write a multiline env var BODY to $GITHUB_ENV
        run: |
          set -euo pipefail
          BRANCH="${GITHUB_REF#refs/heads/}"
          STATUS="${{ needs.build-deploy.result }}"        
          COMMIT="$GITHUB_SHA"
          COMMIT_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/commit/$COMMIT"
          RUN_URL="$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
          WORKFLOW="$GITHUB_WORKFLOW"
          ACTOR="$GITHUB_ACTOR"

          # fallback start time if GITHUB_RUN_STARTED_AT is empty
          STARTED_AT="${GITHUB_RUN_STARTED_AT:-$(date -u +"%Y-%m-%dT%H:%M:%SZ")}"

          # last commit message and author
          LAST_COMMIT=$(git --no-pager log -1 --pretty=format:"%s â€” %an <%ae>")

          cat >> "$GITHUB_ENV" <<GH
          BODY<<EOF
          CI/CD Notification - ${STATUS}

          Repository: ${GITHUB_REPOSITORY}
          Branch: ${BRANCH}
          Workflow: ${WORKFLOW}
          Triggered by: ${ACTOR}
          Status: ${STATUS}
          Commit: ${COMMIT}
          Commit URL: ${COMMIT_URL}
          Run URL: ${RUN_URL}
          Started at: ${STARTED_AT}

          Last commit:
          ${LAST_COMMIT}

          Notes:
          - If status is 'failure' check the run logs at the Run URL above.
          - Deployed files (if success) were synced to /var/www/site1 on your EC2.
          EOF
          GH
          
      - name: Send email via Gmail SMTP
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 587
          username: ${{ secrets.SMTP_USERNAME }}
          password: ${{ secrets.SMTP_PASSWORD }}
          subject: "CI/CD: ${{ needs.build-deploy.result }} â€” ${{ github.repository }} #${{ github.run_number }}"
          body: ${{ env.BODY }}
          to: ${{ secrets.NOTIFY_TO }}
          cc: ${{ secrets.NOTIFY_CC }}
          from: "${{ secrets.EMAIL_FROM_NAME }} <${{ secrets.SMTP_USERNAME }}>"
          secure: true
